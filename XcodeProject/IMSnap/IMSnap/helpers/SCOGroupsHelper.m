//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//
#import "SCOGroupsHelper.h"
#import "PureLayout.h"
#import "SCHeader.h"

@implementation SCOGroupsHelper
+ (SCOGroupsHelper *)sharedInstance {
  static SCOGroupsHelper *__sharedInstance;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        __sharedInstance = [[self alloc] init];
    });
    return __sharedInstance;
}

+ (void)addOrUpdateGroup:(SCOGroup *)arg1 {
  NSDictionary *friendsGroups = nil;
  if ([[SCAppDelPrefs sharedInstance] scFriendGroups]) {
    friendsGroups = [[SCAppDelPrefs sharedInstance] scFriendGroups];
  } else {
    friendsGroups = @{};
  }

  NSMutableDictionary *dict1 = [NSMutableDictionary dictionaryWithDictionary:friendsGroups];
  NSMutableDictionary *dict2 = [arg1 groupDictionary];

  NSString *groupKey = [arg1 key];
  [dict1 setObject:dict2 forKey:groupKey];

  [[SCAppDelPrefs sharedInstance] setScFriendGroups:dict1];
  [[SCOGroupsHelper sharedInstance] reloadMenu];

}
+ (void)deleteGroup:(SCOGroup *)arg1 {
  NSDictionary *friendsGroups = nil;
  if ([[SCAppDelPrefs sharedInstance] scFriendGroups]) {
    friendsGroups = [[SCAppDelPrefs sharedInstance] scFriendGroups];
  } else {
    friendsGroups = @{};
  }

  NSMutableDictionary *dict1 = [NSMutableDictionary dictionaryWithDictionary:friendsGroups];
  NSString *groupKey = [arg1 key];
  if ([dict1 objectForKey:groupKey]) {
    [dict1 removeObjectForKey:groupKey];
    [[SCAppDelPrefs sharedInstance] setScFriendGroups:dict1];
  }
  [[SCOGroupsHelper sharedInstance] reloadMenu];
}
+ (id)allSortedGroups {

  NSDictionary *friendsGroups = nil;
  if ([[SCAppDelPrefs sharedInstance] scFriendGroups]) {
    friendsGroups = [[SCAppDelPrefs sharedInstance] scFriendGroups];
  } else {
    friendsGroups = @{};
  }

  NSMutableArray *newArray1 = [NSMutableArray new];
  if ([friendsGroups count]) {
    for (NSString *key in friendsGroups) {
      NSDictionary *dict1 = [friendsGroups objectForKey:key];
      SCOGroup *group = [SCOGroup groupFromDictionary:dict1 withKey:key];
      [newArray1 addObject:group];
    }
  }

  NSArray *sortDescriptors = [NSArray arrayWithObject:[NSSortDescriptor sortDescriptorWithKey:@"title" ascending:YES]];
  NSArray *filtersArraySorted = [newArray1 sortedArrayUsingDescriptors:sortDescriptors];

  return filtersArraySorted;

}

- (void)navigationMenuItemWillFold:(AWNavigationMenuItem *)arg1 {
  NSLog(@"%s", __PRETTY_FUNCTION__);
}
- (void)navigationMenuItemWillUnfold:(AWNavigationMenuItem *)arg1 {
  NSLog(@"%s", __PRETTY_FUNCTION__);
}
- (void)navigationMenuItem:(AWNavigationMenuItem *)arg1 selectionDidChange:(NSUInteger)arg2 {

}
- (CGRect)maskViewFrameInNavigationMenuItem:(AWNavigationMenuItem *)arg1 {

  return self.sendController.view.frame;
}
- (NSAttributedString *)navigationMenuItem:(AWNavigationMenuItem *)arg1 attributedMenuTitleAtIndex:(NSUInteger)arg2 {

  UIColor *foregroundColor = nil;
  if (arg2) {
    foregroundColor = [UIColor grayColor];
  } else {
    foregroundColor = [UIColor greenColor];
  }
  NSDictionary *attributes = @{
    NSForegroundColorAttributeName: foregroundColor,
    NSFontAttributeName: [UIFont systemFontOfSize:15]};

  return [[NSAttributedString alloc] initWithString:[self navigationMenuItem:arg1 menuTitleAtIndex:arg2] attributes:attributes];
}
- (NSString *)navigationMenuItem:(AWNavigationMenuItem *)arg1 menuTitleAtIndex:(NSUInteger)arg2 {
  if (arg2) {
    return [[[self groups] objectAtIndex:arg2-1] title];
  }
  return [[SCAppDelPrefs sharedInstance] localizedStringForKey:@"SETTINGS"];

}
- (NSUInteger *)numberOfRowsInNavigationMenuItem:(AWNavigationMenuItem *)arg1 {
  return [[self groups] count]+1;
}

- (id)selectedIndexes {

}
- (id)viewToDisplayMenuOn {
  return [[self sendController] view];
}
- (void)addButtonToSendVieWController:(SendViewController *)arg1 {
  if ([[SCAppDelPrefs sharedInstance] scEnableFriendGroups]) {
    SCHeader *header = [arg1 valueForKey:@"_header"];
    if (header) {
      [self setSendController:arg1];
      [self setGroups:[[self class] allSortedGroups]];
      self.menuItem = [[AWNavigationMenuItem alloc] init];
      self.menuItem.dataSource = arg1;
      self.menuItem.delegate = arg1;
      [self.menuItem.menuNavigationBarButton setTintColor:[UIColor redColor]];
      [header addSubview:self.menuItem.menuNavigationBarButton];

      [self.menuItem.menuNavigationBarButton autoPinEdge:1 toEdge:2 ofView:[header leftButton] withOffset:5.0];
      [self.menuItem.menuNavigationBarButton autoPinEdge:4 toEdge:4 ofView:header withOffset:-2.0];

      [self.menuItem.menuNavigationBarButton autoSetDimension:7 toSize:44.0];
      [self.menuItem.menuNavigationBarButton autoSetDimension:8 toSize:35.0];
    }
  }
}
- (void)reloadMenu {

  UIButton *button1 = [[self menuItem] menuNavigationBarButton];
  [button1 removeFromSuperview];
  [self setMenuItem:nil];
  [self addButtonToSendVieWController:[self sendController]];


}
@end
