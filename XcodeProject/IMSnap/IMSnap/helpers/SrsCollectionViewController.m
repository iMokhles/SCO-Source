//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "SrsCollectionViewController.h"
#import "RMUniversalAlert.h"
#import "SCAppDelPrefs.h"
#import "Sr.h"
#import "SrsHelper.h"
#import <MobileCoreServices/MobileCoreServices.h>
#import "UIImageView+WebCache.h"

@implementation SrsCollectionViewController

+ (id)initializeController {

	return [[self class] initWithCollectionViewLayout:[SrCollectionViewCell cellLayout]];
}

- (void)viewDidLoad {
	[super viewDidLoad];

	[self setTitle:[[SCAppDelPrefs sharedInstance] localizedStringForKey:@"LOCAL_FILTERS"]];

	self.refreshControl = [UIRefreshControl new];
	[self.refreshControl addTarget:self action:@selector(loadDataSource) forControlEvents:UIControlEventValueChanged];

	[self.collectionView addSubview:self.refreshControl];
	[self.collectionView setAlwaysBounceVertical:YES];

	[self.view setBackgroundColor:[UIColor whiteColor]];
	[self.collectionView setBackgroundColor:[UIColor whiteColor]];

	[[self navigationItem] setLeftBarButtonItem:[[UIBarButtonItem alloc] initWithBarButtonSystemItem:0 target:self action:@selector(didTapDone)]];
	[[self navigationItem] setRightBarButtonItem:[[UIBarButtonItem alloc] initWithBarButtonSystemItem:4 target:self action:@selector(didTapAdd)]];

	[self.collectionView setContentInset:UIEdgeInsetsMake(0, 0, 0, 0)];
	[self.collectionView registerClass:[SrCollectionViewCell class] forCellWithReuseIdentifier:@"SrCollectionViewCellIdentifier"];

	UILongPressGestureRecognizer *longPressGesture = [[UILongPressGestureRecognizer alloc] initWithTarget:self action:@selector(handleLongPress:)];
	[longPressGesture setDelegate:self];
	[longPressGesture setDelaysTouchesBegan:1];
	[self.collectionView addGestureRecognizer:longPressGesture];

	[self loadDataSource];
}

- (void)viewWillAppear:(_Bool)arg1 {
	[super viewWillAppear:arg1];
	[[[self navigationController] navigationBar] setBarStyle:0];
}
- (void)handleLongPress:(UILongPressGestureRecognizer *)arg1 {
	if ([arg1 state] == 1) {
		CGPoint point = [arg1 locationInView:self.collectionView];
		NSIndexPath *indexPath = [self.collectionView indexPathForItemAtPoint:point];
		if (indexPath) {
			[RMUniversalAlert showAlertInViewController:self
                                  withTitle:[[SCAppDelPrefs sharedInstance] localizedStringForKey:@"DELETE_FILTER"]
                                    message:[[SCAppDelPrefs sharedInstance] localizedStringForKey:@"THIS_WILL_REMOVE"]
                          cancelButtonTitle:[[SCAppDelPrefs sharedInstance] localizedStringForKey:@"CANCEL_F"]
                     destructiveButtonTitle:[[SCAppDelPrefs sharedInstance] localizedStringForKey:@"DELETE"]
                          otherButtonTitles:nil
                                   tapBlock:^(RMUniversalAlert *alert, NSInteger buttonIndex){
                                       if (buttonIndex != alert.cancelButtonIndex) {
                                          if (buttonIndex == alert.destructiveButtonIndex) {
                                              Sr *filter = [self.filters objectAtIndex:[indexPath item]];
                                          	if ([self.enabledFiltersKeys containsObject:filter.key]) {
                                          		[self.enabledFiltersKeys removeObject:filter.key];
                                          		[SrsHelper saveEnabledFiltersKeys:self.enabledFiltersKeys];
                                          	}
											[SrsHelper deleteFilter:filter];
											[self.filters removeObject:filter];
											[self.collectionView deleteItemsAtIndexPaths:@[indexPath]];
											[self updateTitle];
                                          }
                                       }
                                   }];
		}


	}
}
- (void)didTapDone {

	[self dismissViewControllerAnimated:YES completion:nil];
	if (self.doneBlock) {
		self.doneBlock(self);
	}
	[[SrsHelper sharedInstance] updateEnabledFiltersForSnapchatWithCompletion:nil];

}
- (void)didTapAdd {
	[RMUniversalAlert showAlertInViewController:self
                                  withTitle:[[SCAppDelPrefs sharedInstance] localizedStringForKey:@"MSG_FILTER"]
                                    message:[[SCAppDelPrefs sharedInstance] localizedStringForKey:@"ADD_FILTER"]
                          cancelButtonTitle:[[SCAppDelPrefs sharedInstance] localizedStringForKey:@"CANCEL_F"]
                     destructiveButtonTitle:nil
                          otherButtonTitles:@[[[SCAppDelPrefs sharedInstance] localizedStringForKey:@"CHOOSE_IMAGE"], [[SCAppDelPrefs sharedInstance] localizedStringForKey:@"OPEN_FOLDER"]]
                                   tapBlock:^(RMUniversalAlert *alert, NSInteger buttonIndex){
                                       
                                       if (buttonIndex != alert.cancelButtonIndex && buttonIndex != alert.destructiveButtonIndex && buttonIndex >= alert.firstOtherButtonIndex) {
                                       		if (buttonIndex == alert.firstOtherButtonIndex) {
                                       			[self showImagePicker];
                                       		} else if ((buttonIndex - alert.firstOtherButtonIndex) == 1) {
                                       			[self openDirectory];
                                       		}
                                       }

                                   }];
}
- (void)showImagePicker {
	UIImagePickerController *imagePicker = [[UIImagePickerController alloc] init];
	[imagePicker setDelegate:self];
	[imagePicker setMediaTypes:@[(NSString *)kUTTypeImage]];
	[imagePicker setAllowsEditing:NO];
	[self presentViewController:imagePicker animated:YES completion:nil];
}
- (void)openDirectory {

	BOOL isFilza = [[UIApplication sharedApplication] canOpenURL:[NSURL URLWithString:@"filza://"]];
	BOOL isIFile = [[UIApplication sharedApplication] canOpenURL:[NSURL URLWithString:@"ifile://"]];

	NSMutableArray *newArray = [NSMutableArray new];

	if (isFilza) {
		[newArray addObject:[[SCAppDelPrefs sharedInstance] localizedStringForKey:@"OPEN_FILZA"]];
	}
    if (isIFile) {
		[newArray addObject:[[SCAppDelPrefs sharedInstance] localizedStringForKey:@"OPEN_IFILE"]];
	}

	NSString *fPath = [NSString stringWithFormat:@"%@", [SrsHelper filtersDirectoryPath]];
	NSString *filzaViewString = [@"filza://view" stringByAppendingString:[SrsHelper filtersDirectoryPath]];
	NSString *ifileFileString = [@"ifile://file://" stringByAppendingString:[SrsHelper filtersDirectoryPath]];

	NSURL *filzaFileURL = [NSURL URLWithString:filzaViewString];
	NSURL *iFileFileURL = [NSURL URLWithString:ifileFileString];




	[RMUniversalAlert showAlertInViewController:self
                                  withTitle:[[SCAppDelPrefs sharedInstance] localizedStringForKey:@"FILTERS_FOLDER"]
                                    message:fPath
                          cancelButtonTitle:[[SCAppDelPrefs sharedInstance] localizedStringForKey:@"CANCEL_F"]
                     destructiveButtonTitle:nil
                          otherButtonTitles:newArray
                                   tapBlock:^(RMUniversalAlert *alert, NSInteger buttonIndex){
                                       
                                       if (buttonIndex != alert.cancelButtonIndex && buttonIndex != alert.destructiveButtonIndex && buttonIndex >= alert.firstOtherButtonIndex) {
                                       		if (buttonIndex == alert.firstOtherButtonIndex) {
                                       			[[UIApplication sharedApplication] openURL:filzaFileURL];
                                       		} else if ((buttonIndex - alert.firstOtherButtonIndex) == 1) {
                                       			[[UIApplication sharedApplication] openURL:iFileFileURL];
                                       		}
                                       }
                                   }];
}
- (void)imagePickerControllerDidCancel:(UIImagePickerController *)picker {
	[picker dismissViewControllerAnimated:YES completion:nil];
}
- (void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary *)info {
	[picker dismissViewControllerAnimated:YES completion:nil];

	UIImage *image = info[UIImagePickerControllerOriginalImage];

	[SrsHelper createAndSaveFilterForImage:image];
	[self loadDataSource];
}
- (void)updateTitle {
	NSString *string1 = [[SCAppDelPrefs sharedInstance] localizedStringForKey:@"FILTERS_FOLDER (%zd/%zd)"];

	[self setTitle:[NSString stringWithFormat:string1, [[self enabledFiltersKeys] count], [[self filters] count]]];


}
- (void)loadDataSource {

	NSMutableArray *newArray = [NSMutableArray arrayWithArray:[SrsHelper enabledFiltersKeys]];
	[self setEnabledFiltersKeys:newArray];
	[SrsHelper fetchFiltersWithCompletion:^(NSArray *filters){

		NSMutableArray *newArray2 = [NSMutableArray arrayWithArray:filters];
		[self setFilters:newArray2];
		[self.collectionView reloadData];
		[self.refreshControl endRefreshing];
		[self updateTitle];

	}];
}
- (long long)numberOfSectionsInCollectionView:(UICollectionView *)arg1 {
	return 1;
}
- (long long)collectionView:(UICollectionView *)arg1 numberOfItemsInSection:(long long)arg2 {
	return [[self filters] count];
}
- (void)collectionView:(UICollectionView *)arg1 didSelectItemAtIndexPath:(NSIndexPath *)indexPath {
	SrCollectionViewCell *cell = (SrCollectionViewCell *)[arg1 cellForItemAtIndexPath:indexPath];
	Sr *filter = [self.filters objectAtIndex:[indexPath item]];
	if ([self.enabledFiltersKeys containsObject:filter.key]) {
		[self.enabledFiltersKeys removeObject:filter.key];
		[cell setFilterSelected:NO];
		[SrsHelper saveEnabledFiltersKeys:self.enabledFiltersKeys];
	} else {

		[self.enabledFiltersKeys addObject:filter.key];
		[cell setFilterSelected:YES];
		[SrsHelper saveEnabledFiltersKeys:self.enabledFiltersKeys];
	}
	[self updateTitle];


}
- (UICollectionViewCell *)collectionView:(UICollectionView *)arg1 cellForItemAtIndexPath:(NSIndexPath *)indexPath {
	SrCollectionViewCell *cell = [arg1 dequeueReusableCellWithReuseIdentifier:@"SrCollectionViewCellIdentifier" forIndexPath:indexPath];
	Sr *filter = [self.filters objectAtIndex:[indexPath item]];
	NSURL *filterUrl = [NSURL fileURLWithPath:[filter path]];

	[cell.imageView sd_setImageWithURL:filterUrl placeholderImage:[self emptyImage]];

	[cell setFilterSelected:[self.enabledFiltersKeys containsObject:filter.key]];
    
    return cell;
}

- (UIImage *)emptyImage {

	UIGraphicsBeginImageContextWithOptions(CGSizeMake(100, 100), NO, 0.0);
    UIImage *emptyImg = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    
    return emptyImg;

}
@end

